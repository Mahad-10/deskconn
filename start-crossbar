#!/usr/bin/python3 -u

#
# Copyright (C) 2018  Omer Akram
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

import socket

from crossbar import run
from twisted.internet import reactor
from zeroconf import ServiceInfo, Zeroconf

import entry_point_helpers as helpers


class ServiceDiscovery:
    def __init__(self, type_='_crossbar._tcp', name='Screen brightness server', address='0.0.0.0', port=5020):
        super().__init__()

        self.info = ServiceInfo(
            type_="{}.local.".format(type_),
            name="{}.{}.local.".format(name, type_),
            address=socket.inet_aton(helpers.get_local_address() if address == '0.0.0.0' else address),
            port=port,
            properties={}
        )

        self.zeroconf = Zeroconf()

    def start_publishing(self):
        print("Registering service: {}".format(self.info.name))
        self.zeroconf.register_service(self.info)
        print("Registered service: {}".format(self.info.name))

    def stop_publishing(self):
        print("Unregistering service: {}".format(self.info.name))
        self.zeroconf.unregister_service(self.info)
        print("Unregistered service: {}".format(self.info.name))

        print("Cleaning up zeroconf")
        self.zeroconf.close()
        print("Cleaned up zeroconf")


class Main:
    def __init__(self):
        super().__init__()
        self.discovery = ServiceDiscovery()

    def _start_publishing_service_delayed(self):
        reactor.callLater(3.0, self.discovery.start_publishing)

    def start(self):
        reactor.addSystemEventTrigger('after', 'startup', self._start_publishing_service_delayed)
        reactor.addSystemEventTrigger('after', 'shutdown', self.discovery.stop_publishing)
        run(helpers.get_start_params())


if __name__ == '__main__':
    Main().start()
