#!/usr/bin/python3 -u

#
# Copyright (C) 2018  Omer Akram
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

import os
import socket
import time

from zeroconf import ServiceInfo, Zeroconf


def is_snap():
    return 'screen-brightness-server' in os.environ.get('SNAP', '')


def get_local_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("www.google.com", 80))
    res = s.getsockname()[0]
    s.close()
    return res


def actually_run(func, parameters):
    service_type = '_crossbar._tcp'
    service_name = 'Screen brightness server'
    info = ServiceInfo(
        type_="{}.local.".format(service_type),
        name="{}.{}.local.".format(service_name, service_type),
        address=socket.inet_aton(get_local_address()),
        # Should be same as in crossbar config file
        port=5020,
        properties={}
    )
    zeroconf = Zeroconf()
    try:
        print("Registering service: {}".format(service_name))
        zeroconf.register_service(info)
        print("Registered service: {}".format(service_name))
        func(parameters)
    finally:
        print("Unregistering service: {}".format(service_name))
        zeroconf.unregister_service(info)
        print("Unregistered service: {}".format(service_name))
        zeroconf.close()


def ensure_crossbar_available_and_run():
    try:
        from crossbar import run
        actually_run(run, ['start', '--config', os.path.join(os.environ.get('SNAP'), 'crossbar-config/config.json'),
                           '--cbdir', os.environ.get('SNAP_USER_DATA')])
    except ImportError:
        time.sleep(5)
        print("Crossbar was not found during previous attempt, trying again")
        ensure_crossbar_available_and_run()


if __name__ == '__main__':
    if is_snap():
        ensure_crossbar_available_and_run()
    else:
        from crossbar import run
        actually_run(run, ['start', '--cbdir', 'crossbar-config'])
