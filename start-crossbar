#!/usr/bin/python3 -u

#
# Copyright (C) 2018  Omer Akram
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

import os
import socket
import threading
import time

from crossbar import run
from zeroconf import ServiceInfo, Zeroconf


def get_local_address():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("www.google.com", 80))
    res = s.getsockname()[0]
    s.close()
    return res


class ServiceDiscovery:
    def __init__(self, type_='_crossbar._tcp', name='Screen brightness server', address='0.0.0.0', port=5020):
        super().__init__()

        self.info = ServiceInfo(
            type_="{}.local.".format(type_),
            name="{}.{}.local.".format(name, type_),
            address=socket.inet_aton(get_local_address() if address == '0.0.0.0' else address),
            port=port,
            properties={}
        )

        self.zeroconf = Zeroconf()
        self.wait_path = None
        self.wait_time = 20

    def _actually_publish(self):
        print("Registering service: {}".format(self.info.name))
        self.zeroconf.register_service(self.info)
        print("Registered service: {}".format(self.info.name))

    def ensure_wait_path(self):
        for i in range(self.wait_time):
            if os.path.exists(self.wait_path):
                break

            if i == self.wait_time - 1:
                raise ValueError("Waited {} seconds but did not find file at {}".format(
                    self.wait_time, self.wait_path))
            time.sleep(1)
        self._actually_publish()

    def start_publishing(self):
        if self.wait_path:
            threading.Thread(target=self.ensure_wait_path).start()
        else:
            self._actually_publish()

    def stop_publishing(self):
        print("Unregistering service: {}".format(self.info.name))
        self.zeroconf.unregister_service(self.info)
        print("Unregistered service: {}".format(self.info.name))
        self.zeroconf.close()

    def set_wait_file(self, path):
        self.wait_path = path

    def set_wait_time(self, seconds):
        self.wait_time = seconds


def is_snap():
    return 'screen-brightness-server' in os.environ.get('SNAP', '')


def main():
    params = ['start']
    if is_snap():
        params.append('--config')
        params.append(os.path.join(os.environ.get('SNAP'), 'crossbar-config/config.json'))
        cbdir = os.environ.get('SNAP_USER_DATA')
    else:
        cbdir = 'crossbar-config'

    params.append('--cbdir')
    params.append(cbdir)
    discovery = ServiceDiscovery()
    discovery.set_wait_file(os.path.join(cbdir, 'node.pid'))
    discovery.set_wait_time(10)
    try:
        discovery.start_publishing()
        run(params)
    finally:
        discovery.stop_publishing()


if __name__ == '__main__':
    main()
